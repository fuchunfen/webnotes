1.尽可能的减少HTTP请求数：比如使用将文件进行合并，使用sprite图等。
2.使用CDN(内容分发网络)。
3.添加Expir/Cache-Control头：
	expire头的内容是一个时间值，值就是资源在本地的过期时间、存在本地。在本地缓存阶段，找到一个对应的资源值，当前时间还没超过资源的过期时间，就直接使用这一个资源，不会发送http请求。
	Cache-Control是http协议中常用的头部之一，它是负责控制页面的缓存机制，如果该头部指示缓存，缓存的内容也会存在本地，操作流程和expire相似，但也有不同的地方，cache-control有更多的选项，而且也有更多的处理方式。
4.启用Gzip压缩，可以较大程度减少文件大小。
5.将css放在页面最上面。
6.将script放在页面最下面。
7.避免在css中使用Expressions：因为这样很容易达到上千次的计算量。
8.把JavaScript和CSS都放到外部文件中：提高了js和css的复用性，减小页面体积，提高了js和css的可维护性。（注：写在页面内的情况：css和js只应用于一个页面；不经常被访问到的页面；脚本和样式很少。）
9.减少DNS查询：对DNS进行缓存，主流浏览器都自带DNS缓存。
10.压缩JavaScript和CSS：去除空格，注释等来减少文件体积。
11.避免重定向。
12.移除重复的脚本：即不要重复的去引用一个脚本，可能会影响脚本运行结果。
13.配置实体标签（ETag)。
14.使用Ajax缓存：
	Post:每次都执行，不被缓存。
	Get:地址不重复执行，可以被缓存。
15.Yslow――网站性能优化工具：很不错，是一个插件。